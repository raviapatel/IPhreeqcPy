name: Build and Deploy Wheels

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        activate-environment: test-env

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel cmake requests numpy 
        pip install --upgrade setuptools wheel requests numpy

    - name: Install Visual Studio Build Tools
      if: runner.os == 'Windows'
      run: |
        conda install -c conda-forge vs2019_win-64
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --quiet --wait"
        pip install cmake
      shell: powershell

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip cmake gcc g++
        python3 -m pip install --upgrade pip
        pip install setuptools wheel requests numpy
        pip install --upgrade setuptools wheel requests numpy

    - name: Install Phreeqc
      run: python setup.py compile_phreeqc

    - name: Build wheel
      run: python setup.py bdist_wheel

    - name: Upload wheel to artifact
      uses: actions/upload-artifact@v2
      with:
        name: wheel-${{ runner.os }}
        path: dist/*.whl

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download wheel artifacts (Windows)
      uses: actions/download-artifact@v2
      with:
        name: wheel-Windows
        path: dist/windows

    - name: Download wheel artifacts (Linux)
      uses: actions/download-artifact@v2
      with:
        name: wheel-Linux
        path: dist/linux

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install twine
      run: pip install twine

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        for file in dist/windows/*.whl dist/linux/*.whl; do
          if ! twine check $file; then
            twine upload $file
          else
            echo "$file already exists on PyPI. Skipping upload."
          fi
        done